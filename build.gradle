plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'maven'
}


sourceCompatibility = 1.8
ext {
    springCloudAlibabaDependency = '2.1.0.RELEASE'
    ioSpringPlatform = 'Brussels-SR17'
    dubboVersion = '2.7.3'
    nakmiProVersion = '1.0-SNAPSHOT'
    lombokVersion = '1.18.10'
}
repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven {
        url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
    }
    mavenCentral()

}

allprojects {

    group 'com.nakami'
    version this.nakmiProVersion

    apply plugin: 'java'
    //用于将jar包发布到maven仓库中
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8


    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
        mavenCentral()

    }

    dependencies {
        //添加apache dubbo 统一依赖管理
        implementation platform("org.apache.dubbo:dubbo-dependencies-bom:${this.dubboVersion}")
        //添加springcloud alibaba统一依赖管理
        implementation platform("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${this.springCloudAlibabaDependency}")
        //添加spring io 进行spring统一依赖管理
        implementation platform("io.spring.platform:platform-bom:${this.ioSpringPlatform}")
        implementation('org.springframework.boot:spring-boot-starter')
        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation('org.springframework.boot:spring-boot-starter-test')

        implementation project(':common')

    }

}
sourceSets {}
//consumer依赖user-provider
project(':consumer'){
    dependencies {
        //巨坑！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
        //由于项目使用了springboot打包插件，所以引入的其他模块，在打包的时候会被打包成springboot项目依赖进来
        //本来只需要一个简单的jar即可，这样会导致无法正确找到所依赖的类。
        //解决方法：被依赖的模块provider-api不使用springboot插件打包。
        //  bootJar {
        //            enabled = false
        //  }
        //  jar {
        //            enabled = true
        //  }
        implementation project(':user-provider-api')
    }
}
project(':user-provide'){
    dependencies {
        implementation project(':user-provider-api')
    }
}

task ('copyAllJars' , type :Copy,group: 'build'){
    rootProject.getAllprojects().eachWithIndex { Project project, int index ->
        from project.getBuildDir().path+'/libs/'
    }

    into getRootProject().getBuildDir().path+'/jars'
}
